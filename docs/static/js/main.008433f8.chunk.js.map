{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCC,QAAQC,IAAI,gBACZR,EAAc,OAKd,2BACIS,KAAK,OACLC,MAAOX,EACPY,SAjBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAC/B,OACI,yBAAKc,UAAY,2BACb,2BAAIJ,GACJ,yBAAKK,IAAOf,EAAKgB,IAAON,MCHvBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAAI,OACNH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAGGqB,EDZiBK,CAAa1B,GAA9BO,EAJ8B,EAI9BA,KAAMa,EAJwB,EAIxBA,QAEb,OACI,oCACI,wBAAIJ,UAAY,qBAAqBhB,GACpCoB,GAAW,uBAAGJ,UAAY,kBAAf,cACZ,yBAAKA,UAAU,aAGPT,EAAKE,KAAI,SAACC,GAAD,OACL,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEhBnBkB,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,kBAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAI9B,OACI,oCACI,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ8C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UCbtC8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.008433f8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((cats => [ inputValue, ...cats,]))\r\n            console.log(\"Submit Hecho\");\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n\r\n            />\r\n        </form>\r\n    );\r\n\r\n    \r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=AoFXGjUNR4iA5zQrumBZUvNJYViSZsAH`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url }) => {\r\n    return (\r\n        <div className = \"card animate__heartBeat\">\r\n            <p>{title}</p>\r\n            <img src = {url} alt = {title}></img>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n   \r\n    const {data, loading} = useFetchGifs(category);\r\n   \r\n    return (\r\n        <>\r\n            <h3 className = \"animate__bounceIn\">{category}</h3>\r\n            {loading && <p className = \"animate__flash\">loading...</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    data.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => (\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            ))\r\n    }, [category])\r\n\r\n\r\n    return state\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Direction']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category} />\r\n                    )) \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}